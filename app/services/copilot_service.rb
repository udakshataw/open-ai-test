require 'httparty'
require 'json'

class CopilotService
  include HTTParty
  base_uri ENV['AZURE_OPENAI_ENDPOINT']

  def initialize
    @headers = {
      "Content-Type" => "application/json",
      "api-key" => ENV['AZURE_OPENAI_API_KEY']  # Use 'api-key' instead of 'Authorization'
    }
  end

  def generate_response(prompt)
    # Generate SQL Query using OpenAI
    sql_query = generate_sql(prompt)
    return sql_query if sql_query.is_a?(Hash) && sql_query[:error] # Error handling

    # Execute SQL and fetch results
    db_response = DatabaseQueryService.query(sql_query)

    return "No data found" if db_response.empty?

    db_response.to_json
  end

  def generate_sql(prompt)
    schema_info = <<-SCHEMA
    You are an AI that generates SQL queries for a PostgreSQL database.
    - `hr_schema.employees` contains employee records like `id`, `name` and `department`.
    - `sales.orders` contains order details, including `id`, `product_name` and `price`.
    - Always use the correct table and schema based on the question.
    - Do NOT assume a `products` table. If the question is about prices, use `sales.orders`.
    - Always use case-insensitive partial searches for names by using ILIKE '%value%' instead of =
    - Output only valid SQL, no explanations.
    SCHEMA

    body = {
      "messages": [
        { "role": "system", "content": schema_info },
        { "role": "user", "content": "Write an SQL query for:\n\n'#{prompt}'\n\nReturn only the SQL query, without any explanation or formatting." }
      ],
      "max_tokens": 150,
      "temperature": 0.2
    }
  
    response = self.class.post("/openai/deployments/#{ENV['AZURE_OPENAI_DEPLOYMENT']}/chat/completions?api-version=2023-05-15",
                               headers: @headers, body: body.to_json)
  
    parsed_response = JSON.parse(response.body) rescue nil
    sql_query = parsed_response.dig("choices", 0, "message", "content")&.strip
  
    # Remove Markdown formatting (e.g., ```sql ... ```)
    sql_query.gsub!(/^```sql\s*/, '')  # Remove starting ```sql
    sql_query.gsub!(/```$/, '')        # Remove ending ```
    sql_query.strip!

    puts ">>>>>>>>>> Generated sql query: #{sql_query}"
  
    if sql_query.empty? || !sql_query.downcase.start_with?("select")
      return { error: "Invalid SQL generated by OpenAI: #{sql_query}" }
    end
  
    sql_query
  end
end
